Application Programming Interfaces (APIs) have become a staple of discussion regarding emerging financial services technologies, and yet many in the industry possess little more than a superficial understanding of the fundamentals of what APIs are, how they work, and what advantages they offer a financial institution. 
An API at its most basic is an interface that allows two systems to communicate. The interface provides a secure controllable way to access either services or data of the underlying software.
We explore the basics of APIs across the following topics:
•	What is an API and why do I want one?
•	What kinds of APIs exist?
•	What are the different ways to build an API, and how are they accessed?
•	What are the risks and security precautions to consider?
•	How do I maintain existing APIs?
While we answer introductory questions about APIs, we don’t delve into API strategies, regulations, or monetization strategies. These topics will be covered in more depth in future reports. For a view of API types specific to banking, see the report APIs in Banking: Four Approaches to Unlocking Business Value.
APIs are enabling a new era of interoperability, connectivity, and opportunity within financial services. Understanding the basics of how they work and are applied is critical to operating in the context of a larger ecosystem with peak efficiency and effectiveness. 
While financial institutions understand that the industry is changing and that there are foundational technologies shaping its evolution that leave many scratching their heads, the industry is fast moving and it’s imperative that all roles and tenures have at least a high-level understanding of certain topics. 
This report is targeted specifically at those who want a better understanding of Application Programming Interfaces (APIs)—what they are, how they work, and how they are benefiting financial services firms. The goal of this report is to equip executives, senior management, and line of business teams with the fundamental knowledge and vocabulary to join the conversation and ask the right questions.
The world of tech comprises an unending number of programs written for specific tasks and in specific languages. In isolation, a single program is not very useful. Applications become useful when they can interconnect and be put to work. This is where an API comes in. 
An API at its most basic is an interface that allows two systems to communicate. The interface provides a front door to access either services or data of the underlying software.
The easiest way to think of an API is like a restaurant. A patron doesn’t walk into a restaurant and head straight to the kitchen to shout their order to the chef—instead they sit down and allow the waiter or waitress to take their order, passing it along for fulfilment. The API in this example is the waiter or waitress. They know how to properly convey the order, which cook might be best equipped to handle the order, and how the order needs to be presented back to you. Similarly, a restaurant has a specific menu of items to order. You can’t order fish if they don’t serve it; you can’t order breakfast for dinner; and you can’t go to another restaurant and order off the same menu. 
WHY SHOULD I CARE ABOUT APIS?
Financial institutions require a variety of software applications to run their business. Examples include internal software, external third-party products, cloud-based solutions, or anything else. These systems need to talk to each other, either to exchange data or relay instructions for carrying out a specific function. APIs provide an interface to communicate.
Imagine having to hard code every single integration or rewrite every instance of a service. Companies like Amazon realized early on that leveraging APIs could enable them to maximize the productive value of their internal assets and developers. In the same way that a restaurant doesn’t create everything from scratch, a business leveraging APIs can use pre-made pieces of code.
While APIs are nothing new, they are critical pieces of today’s digital world. When banks consider open banking, think about partnering with a fintech, or evaluate opportunities in emerging business models, they are considering APIs. It’s no stretch to say that most innovation in financial services today is made possible by APIs. Now more than ever, it’s crucial to build an understanding of the technology. 
WHAT DOES AN API LOOK LIKE IN PRACTICE?
APIs facilitate the exchange of resources from a server or a piece of software. It can be anything from data, functionality, bits of code—whatever the developer wants to expose for other systems to consume. APIs can be written for internal use or for external developers. 
Three common API types in the market today encompass a wide variety of design and architectural approaches. They broadly fall into the following two types and sub-types:
Figure 1: Two Main API Types and Sub-Types

 
Source: Celent
Internal
The early days of integration involved heavily bespoke, on-premise projects with extensive manual work. It was not only time-consuming, but expensive and risky. Localized changes could affect all kinds of other underlying functionality. APIs and microservices (described later) have allowed developers to abstract the integration away from the base assets through additional integration layers, allowing data, software, or services to be consumed without manual intervention. These layers make it easier to create new products using existing software or to enable communication across disparate systems.
A Short History of the API
Although APIs have garnered a lot of press recently, they have been around for many years, as long as there has been a need to connect one system (like a channel system) to another system (like a core platform).
Ancestors to APIs (‘70s/‘80s): PC-Enabled branch automation paved the way for APIs through direct integration with an institution’s mainframe. Point-to-point integration was used for connectivity between single systems (e.g., channel and core platform). The bespoke nature of point-to-point integration created inefficiencies as the number of interfaces grew.
APIs in the .com era (‘90s): The explosion of third party vendor solutions and the emergence of channel platforms and e-commerce meant large IT firms like Temenos, FIS, and Fiserv were overwhelmed by building and maintaining connections with a range of vendor options. APIs were a mix of bespoke integrations and emerging standards, but very loose.
Moving to .Net (‘00s): By the late ‘90s, mounting systems integration work was becoming a problem. Microsoft released the .Net framework and C#, which helped ease the challenge of interoperability by providing pre-packaged and reusable code for developers. The framework also allowed developers to reuse code within the same application, giving financial institutions the ability to support multiple clients on the same code. The reuse of code enabled integration hubs and enterprise approaches to systems integration, relieving a lot of the friction.
Figure 2 below shows how a software developer might create an API to expose internal legacy system functionality to create new customer-facing products. In the first step, the developer accesses the API to connect to assets. The developer then might use those assets together with their own custom creations to make something new.
In the restaurant analogy, this would be like the cooks having to create new recipes every night to serve. Some recipes may be new, but most of the menu will draw on a prepared list from the chef. Many of the items used might even be premade and ready to go so that they don’t need to be created on the spot when the line gets busy.
Internal APIs are also used to integrate two systems. These internal APIs are helpful for two main reasons:
1.	They act as a communication channel between two different systems.
2.	They allow communication between two systems that speak different languages.
Similar to the way an international adapter lets an appliance built for the US speak to infrastructure built for Europe, APIs allow two pieces of software to connect, even if they were not originally built to do so.
External
Externally, certain APIs allow developers or other applications to consume data, functionality, or bits of code remotely, primarily through the web. Here, a developer or system is making an API call to a resource, and the resource is returning information over the web. 
There are a few benefits to this:
1.	External APIs allow developers to access reusable bits of code from a third party, which might be time consuming or even impossible for them to create themselves.

For example, companies like Twilio offer APIs for app builders looking to add specific communication functions within an app, like SMS, voice, or video. Authy allows developers to put multifactor authentication within their applications without needing to build it themselves.
External APIs allow for external parties to access specific services or datasets from an FI with the purpose of collaboration and innovation. Aside from creating new and innovative partnerships, these APIs abstract the messiness of backend processes so that developers can focus on creating interesting innovations. Developers don’t need to know, for example, how payments infrastructure works—they just need to know how to interface with it.
In the case of Uber, developers can access the API to integrate Uber functionality into their offerings. Shown below in Figure 5, this might be a travel app that allows you to book a ride to a hotel.
This is like a food manufacturer distributing food to shops and restaurants. Coca-Cola, for example, is infamously secretive about its Coke recipe, guarding it in a vault where it is considered one of the most closely guarded secrets in food. Nevertheless, shop owners are quick to enhance their storefronts with Cola-Cola signs and fully stocked branded refrigerators. 
Facebook and other large tech platforms use APIs extensively, like blogs or news websites that embed tweets into stories, or logging into third party sites using Facebook credentials. Through authorized access to parts of their platform, these tech companies can extend their reach and enable new use cases.
